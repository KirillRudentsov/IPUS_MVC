@using System.Data;
@using Kendo.Mvc;
@using System.Text;

@model Kendo_Example.Models.Grid

<script src="@Url.Content("~/Scripts/kendo/2019.1.220/jszip.min.js")"></script>

@(Html.Kendo().Grid<dynamic>()
                            .Name(Model.Id)
                            .Columns(columns =>
                            {
                                foreach (var item in Model.COLUMNS.Column)
                                {
                                    var c = columns.Bound(item.Name).Title(item.Label).Width(item.Width)
                                         .Hidden(item.hidden).Visible(item.visible).EditorTemplateName(Enum.GetName(typeof(Kendo_Example.Models.Edittype), item.Model.edittype))
                                         .Format(item.Model.Format).Filterable(true);

                                    // link section
                                    if (item.Type == Kendo_Example.Models.ColumnType.ProcessDesignerLink) {
                                        c.ClientTemplate(Html.ActionLink("#=" + item.Name + "#", "DynamicGraph",
                                            "Home", new { link = "#=" + item.Name + "#" }, null).ToHtmlString());
                                    }
                                    if (item.Type == Kendo_Example.Models.ColumnType.GridLink) {
                                        c.ClientTemplate(Html.ActionLink("#=" + item.Name + "#", "DynamicGrid",
                                            "Home", new { filename = item.to_type_link, field_name = item.Name, field_value = "#=" + item.Name + "#" }, null).ToHtmlString());
                                    }
                                    // link section

                                    if (item.Model.edittype == Kendo_Example.Models.Edittype.Date)
                                    {
                                        c.Filterable(x => x.Cell(y => y.Template("function(args){ convertDatePickerCell(args, '" + item.Model.Format + "','ru-RU')}")));
                                        c.Filterable(x => x.UI("function(element){ convertDatePickerUI(element, '" + item.Model.Format + "','ru-RU')}"));
                                    }
                                }
                                columns.Command(command => { command.Edit(); command.Destroy(); }).Width(150);
                            })
                                    .ToolBar(toolbar => { toolbar.Create(); })
                                    .Editable(editable => editable.Mode(GridEditMode.InLine))
                                    //.HtmlAttributes(new { style = "height: 1000px;" })
                                    .HtmlAttributes(new { style = "width: " + Model.Width + "px;" })
                                    .Scrollable(scr => scr.Height(Model.Height))
                                    .Groupable()
                                    .Navigatable()
                                    .Resizable(resize => resize.Columns(true))
                                    .Reorderable(reorder => reorder.Columns(true))
                                    .Sortable()
                                    .Pageable(pageable => pageable
                                        .Refresh(true)
                                        .PageSizes(true)
                                        .ButtonCount(5))
                                        .DataSource(dataSource => dataSource
                                            .Ajax()
                                            .Filter(filtersDefault =>
                                            {
                                                // Apply default filters
                                                if (ViewData["field_name"] != null && ViewData["field_value"] != null) {
                                                    List<FilterDescriptor> filterDescriptors = new List<FilterDescriptor>();
                                                    filterDescriptors.Add(new FilterDescriptor(ViewData["field_name"].ToString(),
                                                        FilterOperator.IsEqualTo, ViewData["field_value"].ToString()));
                                                    filtersDefault.AddRange(filterDescriptors.AsEnumerable());
                                                }
                                            })
                                            .ServerOperation(true)
                                            .Read(read =>
                                            {
                                                read.Action(Model.DataSource.Action, Model.DataSource.Controller_name,
                                                    new { link = Model.DataSource.key_link });
                                            })
                                            .Create(update => update.Action(Model.Update.DataSource.Action,
                                                Model.Update.DataSource.Controller_name, new { link = Model.Update.DataSource.key_link }))
                                            .Model(model =>
                                            {
                                                foreach (var m in Model.COLUMNS.Column)
                                                {
                                                    if (m.key)
                                                        model.Id(m.Name);

                                                    if (m.Model.edittype == Kendo_Example.Models.Edittype.String)
                                                        model.Field(m.Name, typeof(string)).DefaultValue(m.Model.Default_value).Editable(m.Model.editable);
                                                    if (m.Model.edittype == Kendo_Example.Models.Edittype.Date)
                                                        model.Field(m.Name, typeof(DateTime)).Editable(m.Model.editable);
                                                    if (m.Model.edittype == Kendo_Example.Models.Edittype.Integer)
                                                        model.Field(m.Name, typeof(int)).DefaultValue(m.Model.Default_value).Editable(m.Model.editable);
                                                    if (m.Model.edittype == Kendo_Example.Models.Edittype.Boolean)
                                                        model.Field(m.Name, typeof(bool)).DefaultValue(m.Model.Default_value).Editable(m.Model.editable);
                                                }
                                            })
                                            .Update(update => update.Action(Model.Edit.DataSource.Action,
                                                Model.Edit.DataSource.Controller_name, new { link = Model.Edit.DataSource.key_link }))
                                            .Destroy(update => update.Action(Model.Delete.DataSource.Action,
                                                Model.Delete.DataSource.Controller_name, new { link = Model.Delete.DataSource.key_link }))
                                            .Events(events =>
                                            {
                                                events.Error("onHTTPError_Alertify");
                                                events.RequestEnd("reload_Grid");
                                                events.Sync("sync_Grid");
                                            })
                                            .PageSize(Model.SelectCountRows)
                                    )
                                    .Filterable(ftb => ftb.Mode(GridFilterMode.Row))
                                    .ColumnMenu()
                                    .Events(ev => {
                                        StringBuilder functionBuilder = new StringBuilder();
                                        Model.COLUMNS.Column.ForEach(el =>
                                        {
                                            if (el.Model.edittype == Kendo_Example.Models.Edittype.Date)
                                                functionBuilder.Append("convertDatePickerUI($('#" + el.Name + "'),'" + el.Model.Format + "','ru-RU');" + "\n");
                                            if (el.Model.edittype == Kendo_Example.Models.Edittype.Integer)
                                                functionBuilder.Append("convertNumericTextBox($('#" + el.Name + "'),'" + el.Model.Format + "');" + "\n");
                                            if (el.Model.edittype == Kendo_Example.Models.Edittype.String)
                                                functionBuilder.Append("convertAU($('#" + el.Name + "'),'" + Url.Action("GetAuData", "ComponentData",
                                                    new { link = el.Model.link }) + "','" + el.Name + "');" + "\n");
                                        });
                                        ev.BeforeEdit("function(){setTimeout(function () { " + functionBuilder + " }, 50); }");
                                    })
                                    .ToolBar(tools => { if (Model.Export_Pdf != null) tools.Pdf(); })
                                    .ToolBar(tools => { if (Model.Export_Excel != null) tools.Excel(); })
                                    .Pdf(pdf =>
                                    {
                                        if (Model.Export_Pdf != null)
                                        {
                                            pdf
                                            .AvoidLinks()
                                            .PaperSize("auto")
                                            .Scale(0.8)
                                            .Margin("2cm", "1cm", "1cm", "1cm")
                                            .Landscape()
                                            .RepeatHeaders()
                                            .TemplateId("page-template")
                                            .Title(Model.Export_Pdf.Caption)
                                            .FileName(Model.Export_Pdf.File_name)
                                            .ProxyURL(Url.Action(Model.Export_Pdf.DataSource.Action, Model.Export_Pdf.DataSource.Controller_name));
                                        }
                                    })
                                    .Excel(excel =>
                                    {
                                        if (Model.Export_Excel != null)
                                        {
                                            excel
                                            .Filterable(true)
                                             .FileName(Model.Export_Excel.File_name)
                                             .Filterable(true)
                                             .ProxyURL(Url.Action(Model.Export_Excel.DataSource.Action, Model.Export_Excel.DataSource.Controller_name));
                                        }
                                    })

)
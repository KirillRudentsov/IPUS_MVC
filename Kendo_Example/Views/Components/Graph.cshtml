
@(Html.Kendo().Diagram<Kendo_Example.SupportClasses.Node, Kendo_Example.SupportClasses.Edge>()
                        .Name("ProcessDesigner")
                        .DataSource(source => source
                                    .ShapeDataSource()
                                    .Model(m =>
                                    {
                                        m.Id(s => s.id);

                                        m.Field(s => s.label).Editable(true);
                                        m.Field(s => s.title).Editable(true);
                                        m.Field(s => s.color).Editable(true);
                                        m.Field(s => s.shape).Editable(true);
                                        m.Field(s => s.size).Editable(true);

                                        m.Field(s => s.font).Editable(false);
                                        m.Field(s => s.font.align).Editable(false);
                                        m.Field(s => s.font.size).Editable(false);
                                        m.Field(s => s.font.multi).Editable(false);

                                        m.Field(s => s.attributes).Editable(false);
                                        m.Field(s => s.attributes.id).Editable(true);
                                        m.Field(s => s.attributes.type).Editable(true);
                                    })
                            .Read("GetGraphNodes", "AutoComplete")
                            .Create("CreateShape", "DiagramData")
                            .Destroy("DestroyShape", "DiagramData")
                            .Update("UpdateShape", "DiagramData")
                        )
                        .Editable(true)
                          .ConnectionsDataSource(d => d
                                .Model(m =>
                                {
                                    m.Id(c => c.id);

                                    m.Field(c => c.id);
                                    m.Field(c => c.title);

                                    m.From(c => c.from);
                                    m.To(c => c.to);
                                    m.FromX(c => c.FromPointX );
                                    m.FromY(c => c.FromPointY);
                                    m.ToX(c => c.ToPointX);
                                    m.ToY(c => c.ToPointY);
                                })
                                .Read("GetGraphEdges", "AutoComplete")
                            )
                          .Events(e => e.DataBound("onDataBound"))
                          .Layout(l => l
                              .Type(DiagramLayoutType.Tree)
                              .Subtype(DiagramLayoutSubtype.Tipover)
                              .UnderneathHorizontalOffset(140)
                          )
                          .ShapeDefaults(sd => sd
                              .Visual("visualTemplate")
                          //.Content(c => c
                          //    .Template("#= dataItem.label #")
                          //    .FontSize(17)
                          //    .Color("#= dataItem.color #")
                          //    .Text("#= dataItem.label #")
                          //)
                          )
                        .ConnectionDefaults(cd => cd
                            .Stroke(s => s
                                .Color("#586477")
                                .Width(2)
                            )
                        )

)

